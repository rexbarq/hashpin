/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HashpinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INITIAL_DIFFICULTY"
      | "claimHash"
      | "currentDifficulty"
      | "getDifficulty"
      | "getHashDetails"
      | "meetsDifficulty"
      | "owner"
      | "pinHash"
      | "pinnedHashes"
      | "renounceOwnership"
      | "setAdapterWhitelisted"
      | "setDifficulty"
      | "transferOwnership"
      | "verifyHash"
      | "whitelistedAdapters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdapterWhitelisted"
      | "DifficultyUpdated"
      | "HashClaimed"
      | "HashPinned"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INITIAL_DIFFICULTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimHash",
    values: [BytesLike, BytesLike[], AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHashDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "meetsDifficulty",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pinHash",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pinnedHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdapterWhitelisted",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDifficulty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyHash",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAdapters",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "INITIAL_DIFFICULTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHashDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "meetsDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pinHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pinnedHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdapterWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAdapters",
    data: BytesLike
  ): Result;
}

export namespace AdapterWhitelistedEvent {
  export type InputTuple = [adapter: AddressLike, whitelisted: boolean];
  export type OutputTuple = [adapter: string, whitelisted: boolean];
  export interface OutputObject {
    adapter: string;
    whitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DifficultyUpdatedEvent {
  export type InputTuple = [newDifficulty: BigNumberish];
  export type OutputTuple = [newDifficulty: bigint];
  export interface OutputObject {
    newDifficulty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HashClaimedEvent {
  export type InputTuple = [
    claimer: AddressLike,
    hash: BytesLike,
    adapter: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    claimer: string,
    hash: string,
    adapter: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    claimer: string;
    hash: string;
    adapter: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HashPinnedEvent {
  export type InputTuple = [
    pinner: AddressLike,
    powHash: BytesLike,
    metadata: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    pinner: string,
    powHash: string,
    metadata: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    pinner: string;
    powHash: string;
    metadata: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Hashpin extends BaseContract {
  connect(runner?: ContractRunner | null): Hashpin;
  waitForDeployment(): Promise<this>;

  interface: HashpinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INITIAL_DIFFICULTY: TypedContractMethod<[], [bigint], "view">;

  claimHash: TypedContractMethod<
    [
      hash: BytesLike,
      merkleProof: BytesLike[],
      adapter: AddressLike,
      metadata: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  currentDifficulty: TypedContractMethod<[], [bigint], "view">;

  getDifficulty: TypedContractMethod<[], [bigint], "view">;

  getHashDetails: TypedContractMethod<
    [powHash: BytesLike],
    [
      [string, string, bigint] & {
        pinner: string;
        metadata: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  meetsDifficulty: TypedContractMethod<[hash: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pinHash: TypedContractMethod<
    [hash: BytesLike, nonce: BigNumberish, metadata: string],
    [string],
    "nonpayable"
  >;

  pinnedHashes: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint] & {
        pinner: string;
        metadata: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdapterWhitelisted: TypedContractMethod<
    [adapter: AddressLike, whitelisted: boolean],
    [void],
    "nonpayable"
  >;

  setDifficulty: TypedContractMethod<
    [newDifficulty: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyHash: TypedContractMethod<
    [hash: BytesLike, merkleProof: BytesLike[]],
    [string],
    "view"
  >;

  whitelistedAdapters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INITIAL_DIFFICULTY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimHash"
  ): TypedContractMethod<
    [
      hash: BytesLike,
      merkleProof: BytesLike[],
      adapter: AddressLike,
      metadata: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentDifficulty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDifficulty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHashDetails"
  ): TypedContractMethod<
    [powHash: BytesLike],
    [
      [string, string, bigint] & {
        pinner: string;
        metadata: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "meetsDifficulty"
  ): TypedContractMethod<[hash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pinHash"
  ): TypedContractMethod<
    [hash: BytesLike, nonce: BigNumberish, metadata: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pinnedHashes"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint] & {
        pinner: string;
        metadata: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdapterWhitelisted"
  ): TypedContractMethod<
    [adapter: AddressLike, whitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDifficulty"
  ): TypedContractMethod<[newDifficulty: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyHash"
  ): TypedContractMethod<
    [hash: BytesLike, merkleProof: BytesLike[]],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "whitelistedAdapters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "AdapterWhitelisted"
  ): TypedContractEvent<
    AdapterWhitelistedEvent.InputTuple,
    AdapterWhitelistedEvent.OutputTuple,
    AdapterWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "DifficultyUpdated"
  ): TypedContractEvent<
    DifficultyUpdatedEvent.InputTuple,
    DifficultyUpdatedEvent.OutputTuple,
    DifficultyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "HashClaimed"
  ): TypedContractEvent<
    HashClaimedEvent.InputTuple,
    HashClaimedEvent.OutputTuple,
    HashClaimedEvent.OutputObject
  >;
  getEvent(
    key: "HashPinned"
  ): TypedContractEvent<
    HashPinnedEvent.InputTuple,
    HashPinnedEvent.OutputTuple,
    HashPinnedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AdapterWhitelisted(address,bool)": TypedContractEvent<
      AdapterWhitelistedEvent.InputTuple,
      AdapterWhitelistedEvent.OutputTuple,
      AdapterWhitelistedEvent.OutputObject
    >;
    AdapterWhitelisted: TypedContractEvent<
      AdapterWhitelistedEvent.InputTuple,
      AdapterWhitelistedEvent.OutputTuple,
      AdapterWhitelistedEvent.OutputObject
    >;

    "DifficultyUpdated(uint256)": TypedContractEvent<
      DifficultyUpdatedEvent.InputTuple,
      DifficultyUpdatedEvent.OutputTuple,
      DifficultyUpdatedEvent.OutputObject
    >;
    DifficultyUpdated: TypedContractEvent<
      DifficultyUpdatedEvent.InputTuple,
      DifficultyUpdatedEvent.OutputTuple,
      DifficultyUpdatedEvent.OutputObject
    >;

    "HashClaimed(address,bytes32,address,uint256)": TypedContractEvent<
      HashClaimedEvent.InputTuple,
      HashClaimedEvent.OutputTuple,
      HashClaimedEvent.OutputObject
    >;
    HashClaimed: TypedContractEvent<
      HashClaimedEvent.InputTuple,
      HashClaimedEvent.OutputTuple,
      HashClaimedEvent.OutputObject
    >;

    "HashPinned(address,bytes32,string,uint256)": TypedContractEvent<
      HashPinnedEvent.InputTuple,
      HashPinnedEvent.OutputTuple,
      HashPinnedEvent.OutputObject
    >;
    HashPinned: TypedContractEvent<
      HashPinnedEvent.InputTuple,
      HashPinnedEvent.OutputTuple,
      HashPinnedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
