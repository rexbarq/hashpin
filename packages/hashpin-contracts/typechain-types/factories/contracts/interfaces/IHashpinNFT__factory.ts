/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IHashpinNFT,
  IHashpinNFTInterface,
} from "../../../contracts/interfaces/IHashpinNFT";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "metadata",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IHashpinNFT__factory {
  static readonly abi = _abi;
  static createInterface(): IHashpinNFTInterface {
    return new Interface(_abi) as IHashpinNFTInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IHashpinNFT {
    return new Contract(address, _abi, runner) as unknown as IHashpinNFT;
  }
}
